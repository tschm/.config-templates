# This file is part of the tschm/.config-templates repository
# (https://github.com/tschm/.config-templates).
#
# Action: Setup Project (composite action)
#
# Purpose: Bootstrap a Python project in GitHub Actions by:
#   - Installing Task, uv, and uvx into a local ./bin directory
#   - Optionally rendering the repository from a Copier template for tests
#   - Detecting presence of pyproject.toml and exposing it as an output
#   - Creating a virtual environment with uv and syncing dependencies
#
# Inputs:
#   - python-version: Python version used for the virtual environment (default: 3.12)
#
# Outputs:
#   - pyproject_exists: "true" if pyproject.toml exists, otherwise "false"
#
# Notes:
#   - Safe to run in repositories without pyproject.toml; dependency sync will be skipped.
#   - Used by workflows such as CI, Book, Marimo, and Release.

name: 'Setup Project'
description: 'Setup the project'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.12'

outputs:
  pyproject_exists:
    description: 'Flag indicating whether pyproject.toml exists'
    value: ${{ steps.check_pyproject.outputs.exists }}

runs:
  using: 'composite'
  steps:
    # Use actions/setup-python before using uv, to ensure the version exists
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up task, uv, uvx and the venv
      shell: bash
      run: |
        mkdir -p bin

        # Add ./bin to the PATH
        echo "Adding ./bin to PATH"
        echo "$(pwd)/bin" >> $GITHUB_PATH

        # Define task URLs
        TASK_URL="https://taskfile.dev/install.sh"
        TASK_CHECKSUM_URL="https://taskfile.dev/install.sh.sha256"

        # Download the install script and checksum
        curl -fsSL $TASK_URL -o task-install.sh
        curl -fsSL $TASK_CHECKSUM_URL -o task-install.sh.sha256

        # Verify the checksum matches
        expected_checksum=$(cat task-install.sh.sha256)
        actual_checksum=$(sha256sum task-install.sh | awk '{ print $1 }')

        if [ "$expected_checksum" != "$actual_checksum" ]; then
          echo "Checksum verification failed! Exiting."
          exit 1
        fi

        # If checksum matches, install Task
        sh task-install.sh -d -b ./bin

        # UV: Same process for UV installation
        UV_URL="https://astral.sh/uv/install.sh"
        UV_CHECKSUM_URL="https://astral.sh/uv/install.sh.sha256"
        curl -fsSL $UV_URL -o uv-install.sh
        curl -fsSL $UV_CHECKSUM_URL -o uv-install.sh.sha256

        # Verify checksum
        expected_checksum=$(cat uv-install.sh.sha256)
        actual_checksum=$(sha256sum uv-install.sh | awk '{ print $1 }')

        if [ "$expected_checksum" != "$actual_checksum" ]; then
          echo "Checksum verification failed! Exiting."
          exit 1
        fi

        # If checksum matches, install UV
        UV_INSTALL_DIR="./bin" sh uv-install.sh

        # Verify installations
        task --version
        uv --version
        uvx --version

    - name: Render the project
      if: hashFiles('tests/resources/render.yml') != ''
      shell: bash
      run: |
        pip install copier

        # Render the current folder in-place
        copier copy . . \
          --data-file ./tests/resources/render.yml \
          --force \
          --overwrite \
          --quiet

        # Delete all remaining .jinja files
        find . -type f -name "*.jinja" -exec rm -f {} +

        # Delete all folders that still contain {{ ... }}
        find . -depth -type d -name "*{{*}}*" -exec rm -rf {} +

        ls -R

    - name: Check for pyproject.toml
      id: check_pyproject
      shell: bash
      run: |
        if [ -f "pyproject.toml" ]; then
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Build the virtual environment
      shell: bash
      run: uv venv --python ${{ inputs.python-version }}

    - name: "Install the dependencies for ${{ github.repository }} if pyproject.toml exists"
      shell: bash
      run: |
        if [ -f "pyproject.toml" ]; then
          uv sync --all-extras
        else
          echo "No pyproject.toml found, skipping package installation"
        fi
