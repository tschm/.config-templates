# This file is part of the tschm/.config-templates repository
# (https://github.com/tschm/.config-templates).
#
name: 'Sync Config Templates'
description: 'Sync configuration templates into a project and create a pull request if needed'
author: 'Thomas Schmelzer'

inputs:
  branch:
    description: 'Branch to sync changes to'
    default: 'sync/update-configs'
    required: false
  commit-message:
    description: 'Commit message for sync'
    default: 'chore: sync config files from .config-templates'
    required: false
  include:
    description: 'List of files and folders to include'
    default: |
      CODE_OF_CONDUCT.md
      CONTRIBUTING.md
      ruff.toml
      Makefile
      .pre-commit-config.yaml
      .editorconfig
      .gitignore
      .github
    required: false
  exclude:
    description: 'List of files to exclude'

  #  default: 'LICENSE'
  #  required: false

runs:
  using: "composite"
  steps:
    - name: Ensure Git repository
      run: |
        git rev-parse --is-inside-work-tree > /dev/null || {
          echo "‚ùå Not in a git repository"
          exit 1
        }
      shell: bash

    - name: Download and apply templates
      run: |
        set -euo pipefail

        REPO_URL="https://github.com/tschm/.config-templates"
        TEMP_DIR="$(mktemp -d)"
        FILTERED_DIR="$(mktemp -d)"
        trap 'rm -rf "$TEMP_DIR" "$FILTERED_DIR"' EXIT

        echo "üì• Downloading template archive..."
        curl -sSL -o templates.zip "$REPO_URL/archive/refs/heads/main.zip"

        echo "üì¶ Extracting..."
        unzip -q templates.zip -d "$TEMP_DIR"
        rm -f templates.zip

        EXTRACTED_DIR="${TEMP_DIR}/.config-templates-main"
        ls -all ${EXTRACTED_DIR}

        echo "üîç Processing include list..."
        echo "${{ inputs.include }}"

        # Split on newlines instead of commas
        while IFS= read -r item; do
          # Skip empty lines
          [ -z "$item" ] && continue

          # Trim whitespace
          item=$(echo "$item" | xargs)
          if [ -e "${EXTRACTED_DIR}/$item" ]; then
            mkdir -p "${FILTERED_DIR}/$(dirname "$item")"
            # Copy the included item to the filtered directory
            if [ -d "${EXTRACTED_DIR}/$item" ]; then
              cp -R "${EXTRACTED_DIR}/$item" "${FILTERED_DIR}/$(dirname "$item")/"
            else

              cp "${EXTRACTED_DIR}/$item" "${FILTERED_DIR}/$item"
            fi
          else
            echo "  Warning: Include item '$item' not found in template"
          fi
        done <<< "${{ inputs.include }}"

        echo "üìÇ Copying to working directory..."
        cp -Rf "${FILTERED_DIR}/." .

        echo "‚úÖ Sync complete. Changed files:"
        git status --short || true
      shell: bash
